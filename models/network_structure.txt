DWUNet(
  (encoder): DWEncoder(
    (stem): DWConvBlock(
      (dwconv): Conv2d(1, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
      (norm): GroupNorm(1, 1, eps=1e-05, affine=True)
      (pwconv): Conv2d(1, 32, kernel_size=(1, 1), stride=(1, 1))
      (act): GELU(approximate='none')
    )
    (encoders): ModuleList(
      (0): DownBlock(
        (convs): ModuleList(
          (0-1): 2 x DWConvBlock(
            (dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            (pwconv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
        )
        (down_sample): AvgPool2d(kernel_size=2, stride=2, padding=0)
      )
      (1): DownBlock(
        (convs): ModuleList(
          (0): DWConvBlock(
            (dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            (pwconv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
          (1): DWConvBlock(
            (dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            (pwconv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
        )
        (down_sample): AvgPool2d(kernel_size=2, stride=2, padding=0)
      )
      (2): DownBlock(
        (convs): ModuleList(
          (0): DWConvBlock(
            (dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            (pwconv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
          (1-3): 3 x DWConvBlock(
            (dwconv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            (pwconv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
        )
        (down_sample): AvgPool2d(kernel_size=2, stride=2, padding=0)
      )
      (3): DownBlock(
        (convs): ModuleList(
          (0): DWConvBlock(
            (dwconv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            (pwconv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
          (1): DWConvBlock(
            (dwconv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
            (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            (pwconv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
        )
        (down_sample): AvgPool2d(kernel_size=2, stride=2, padding=0)
      )
    )
    (bridge): DWConvBlock(
      (dwconv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
      (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      (pwconv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
      (act): GELU(approximate='none')
    )
  )
  (decoder): DWDecoder(
    (decoders): ModuleList(
      (0): UpBlock(
        (up_conv): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))
        (convs): ModuleList(
          (0): DWConvBlock(
            (dwconv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
            (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
            (pwconv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
          (1): DWConvBlock(
            (dwconv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
            (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            (pwconv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
        )
      )
      (1): UpBlock(
        (up_conv): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))
        (convs): ModuleList(
          (0): DWConvBlock(
            (dwconv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
            (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            (pwconv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
          (1): DWConvBlock(
            (dwconv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            (pwconv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
        )
      )
      (2): UpBlock(
        (up_conv): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))
        (convs): ModuleList(
          (0): DWConvBlock(
            (dwconv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            (pwconv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
          (1): DWConvBlock(
            (dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            (pwconv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
        )
      )
      (3): UpBlock(
        (up_conv): ConvTranspose2d(64, 32, kernel_size=(2, 2), stride=(2, 2))
        (convs): ModuleList(
          (0): DWConvBlock(
            (dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            (pwconv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
          (1): DWConvBlock(
            (dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            (pwconv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (act): GELU(approximate='none')
          )
        )
      )
    )
    (final_conv): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
  )
)
